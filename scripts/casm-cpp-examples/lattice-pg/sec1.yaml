title: Lattices
name: sec1
summary: Construct lattices
steps:
  - desc: Examples constructing a lattice.
    id: sec1.0
    code: |
      #include <iostream>
      #include "casm/crystallography/Lattice.hh"

      /// \brief Main function
      int main(int argc, char** argv)
      {
        Eigen::Vector3d vec1 {1., 0., 0.};
        Eigen::Vector3d vec2 {0., 2., 0.};
        Eigen::Vector3d vec3 {0., 0., 3.};
        CASM::Lattice lat1 {vec1, vec2, vec3};
        std::cout << "Lattice 1 (as column vector matrix): " << std::endl;
        std::cout << lat1.lat_column_mat() << "\n" << std::endl;

        Eigen::Matrix3d M;
        M << 1., 0., 0.,
             0., 2., 0.,
             0., 0., 3.;
        CASM::Lattice lat2 {M};
        std::cout << "Lattice 2 (as column vector matrix): " << std::endl;
        std::cout << lat2.lat_column_mat() << "\n" << std::endl;

        CASM::Lattice lat3 {
          {1., 0., 0.},
          {0., 2., 0.},
          {0., 0., 3.}};
        std::cout << "Lattice 3 (as column vector matrix): " << std::endl;
        std::cout << lat3.lat_column_mat() << "\n" << std::endl;

      }
  - desc: Example constructing a lattice and checking its lattice vectors.
    id: sec1.1
    code: |
      #include <iostream>
      #include "casm/crystallography/Lattice.hh"

      /// \brief Main function
      int main(int argc, char** argv)
      {
        Eigen::Vector3d vec1 {1., 0., 0.};
        Eigen::Vector3d vec2 {0., 2., 0.};
        Eigen::Vector3d vec3 {0., 0., 3.};

        CASM::Lattice lat {vec1, vec2, vec3};

        std::cout << "A lattice (as column vector matrix): " << std::endl;
        std::cout << lat.lat_column_mat() << "\n" << std::endl;

        std::cout << "The first lattice vector: " << lat[0].transpose() << "\n" << std::endl;

        std::cout << "Lattice vectors as column matrix: \n" << lat.lat_column_mat() << "\n" << std::endl;

        std::cout << "Get lattice vectors as a std::tuple" << std::endl;
        Eigen::Vector3d a, b, c;
        std::tie(a, b, c) = lat.vectors();

        std::cout << "a: " << a.transpose() << std::endl;
        std::cout << "b: " << b.transpose() << std::endl;
        std::cout << "c: " << c.transpose() << std::endl;

      }
  - desc: Other lattice properties.
    id: sec1.2
    code: |
      #include <iostream>
      #include "casm/crystallography/Lattice.hh"

      /// \brief Main function
      int main(int argc, char** argv)
      {
        Eigen::Vector3d vec1 {1., 0., 0.};
        Eigen::Vector3d vec2 {0., 2., 0.};
        Eigen::Vector3d vec3 {0., 0., 3.};

        CASM::Lattice lat {vec1, vec2, vec3};

        std::cout << "Lattice vectors as column matrix: \n" << lat.lat_column_mat() << "\n" << std::endl;

        std::cout << "Angles: " << lat.angle(0) << " " << lat.angle(1) << " " << lat.angle(2) << std::endl;
        std::cout << "Lengths: " << lat.length(0) << " " << lat.length(1) << " " << lat.length(2) << std::endl;
        std::cout << "Volume: " << lat.vol() << "\n" << std::endl;

        std::cout << "Reciprocal lattice (as column vector matrix): " << std::endl;
        std::cout << lat.get_reciprocal().lat_column_mat() << "\n" << std::endl;

        std::cout << "2x2x2 Supercell (as column vector matrix): " << std::endl;
        Eigen::Matrix3i T;
        T << 2, 0, 0,
             0, 2, 0,
             0, 0, 2;
        CASM::Lattice super_lat = make_supercell(lat, T);
        std::cout << super_lat.lat_column_mat() << "\n" << std::endl;

      }
