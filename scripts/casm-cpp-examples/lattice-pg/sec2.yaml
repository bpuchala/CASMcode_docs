title: Lattice point groups
name: sec2
summary: Generate lattice point groups
steps:
  - desc: "Generate and print the cubic lattice point group."
    id: sec2.0
    code: |
      #include <iostream>
      #include "casm/crystallography/Lattice.hh"
      #include "casm/symmetry/SymGroup.hh"

      /// \brief Main function
      int main(int argc, char** argv)
      {
        CASM::Lattice lat { {1., 0., 0.}, {0., 1., 0.}, {0., 0., 1.}};

        std::cout << "Lattice (as column vector matrix): " << std::endl;
        std::cout << lat.lat_column_mat() << "\n" << std::endl;

        CASM::SymGroup pg;
        double tol = CASM::TOL; // default tolerance = 1e-5
        lat.generate_point_group(pg, tol);

        std::cout << "Point group (Cartesian coordinates): \n";
        pg.print(std::cout, CASM::CART);

      }
  - desc: "Generate and print the tetragonal lattice point group."
    id: sec2.1
    code: |
      #include <iostream>
      #include "casm/crystallography/Lattice.hh"
      #include "casm/symmetry/SymGroup.hh"

      /// \brief Main function
      int main(int argc, char** argv)
      {
        CASM::Lattice lat { {1., 0., 0.}, {0., 1., 0.}, {0., 0., 2.}};

        std::cout << "Lattice (as column vector matrix): " << std::endl;
        std::cout << lat.lat_column_mat() << "\n" << std::endl;

        CASM::SymGroup pg;
        double tol = CASM::TOL; // default tolerance = 1e-5
        lat.generate_point_group(pg, tol);

        std::cout << "Point group (Cartesian coordinates): \n";
        pg.print(std::cout, CASM::CART);

      }
  - desc: "Point group sizes: fcc, bcc, cubic, hexagonal."
    id: sec2.2
    code: |
      #include <iostream>
      #include "casm/crystallography/Lattice.hh"
      #include "casm/symmetry/SymGroup.hh"

      /// \brief Main function
      int main(int argc, char** argv)
      {
        CASM::SymGroup pg;
        double tol = CASM::TOL; // default tolerance = 1e-5

        pg.clear();
        CASM::Lattice::fcc().generate_point_group(pg, tol);
        std::cout << "fcc point group size: " << pg.size() << std::endl;

        pg.clear();
        CASM::Lattice::bcc().generate_point_group(pg, tol);
        std::cout << "bcc point group size: " << pg.size() << std::endl;

        pg.clear();
        CASM::Lattice::cubic().generate_point_group(pg, tol);
        std::cout << "cubic point group size: " << pg.size() << std::endl;

        pg.clear();
        CASM::Lattice::hexagonal().generate_point_group(pg, tol);
        std::cout << "hexagonal point group size: " << pg.size() << std::endl;

      }
